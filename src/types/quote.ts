import { z } from 'zod'
import { createResponseSchema } from '@/types/base-api-response'

const TempDataSchema = z.object({
  'Mask-IdNo': z.string().optional(),
  'MaskAfter-IdNo': z.string().optional(),
  'Mask-Mobile': z.string().optional(),
  'MaskAfter-Mobile': z.string().optional(),
})

// Policy customer information
const PolicyCustomerSchema = z.object({
  AddrProvince: z.string(),
  AddressLine1: z.string(),
  AddressLine2: z.string(),
  BusinessObjectId: z.number(),
  City: z.string(),
  DateOfBirth: z.string(),
  Email: z.string(),
  FirstName: z.string(),
  Gender: z.string(),
  IdNo: z.string(),
  IdTypeCode: z.string(),
  IsInsured: z.string(),
  IsOrgParty: z.string(),
  IsPolicyHolder: z.string(),
  LastName: z.string(),
  MiddleName: z.string().optional(),
  Mobile: z.string(),
  ParentElementType: z.string(),
  ParentPolicyElementId: z.number(),
  PolicyElementId: z.number(),
  PolicyId: z.string(),
  PolicyStatus: z.number(),
  PostCode: z.string(),
  SequenceNumber: z.number(),
  Suffix: z.string().optional(),
  Title: z.string(),
  TempData: TempDataSchema,
})

const PolicyCoverageSchema = z.object({
  BusinessObjectId: z.number(),
  CoverageName: z.string(),
  IsFinalLevelCt: z.string(),
  ParentElementType: z.string(),
  ParentPolicyElementId: z.number(),
  PolicyElementId: z.number(),
  PolicyId: z.string(),
  PolicyStatus: z.number(),
  ProductElementCode: z.string(),
  ProductElementId: z.number(),
  SequenceNumber: z.number(),
})

const PolicyRiskSchema = z.object({
  AddrProvince: z.string(),
  AddressLine1: z.string(),
  AddressLine2: z.string(),
  Age: z.number(),
  BusinessObjectId: z.number(),
  City: z.string(),
  DateOfBirth: z.string(),
  Email: z.string(),
  FirstName: z.string(),
  Gender: z.string(),
  IdNo: z.string(),
  IdTypeCode: z.string(),
  InsuredName: z.string(),
  IsAdultTraveller: z.string(),
  IsMainInsured: z.string(),
  LastName: z.string(),
  MiddleName: z.string().optional(),
  Mobile: z.string(),
  ParentElementType: z.string(),
  ParentPolicyElementId: z.number(),
  PolicyCoverageList: z.array(PolicyCoverageSchema),
  PolicyElementId: z.number(),
  PolicyId: z.string(),
  PolicyStatus: z.number(),
  PostCode: z.string(),
  ProductElementCode: z.string(),
  ProductElementId: z.number(),
  SequenceNumber: z.number(),
  Suffix: z.string().optional(),
  TempData: TempDataSchema,
})

const PolicyLobSchema = z.object({
  BusinessObjectId: z.number(),
  ParentElementType: z.string(),
  ParentPolicyElementId: z.number(),
  PolicyElementId: z.number(),
  PolicyId: z.string(),
  PolicyRiskList: z.array(PolicyRiskSchema),
  PolicyStatus: z.number(),
  ProductCode: z.string(),
  ProductElementCode: z.string(),
  ProductElementId: z.number(),
  ProductId: z.number(),
  ProductLobId: z.number(),
  SequenceNumber: z.number(),
  TechProductCode: z.string(),
  TechProductId: z.number(),
})

const PromoCodeSchema = z.object({
  BusinessObjectId: z.number(),
  DiscountPercent: z.number(),
  ParentElementType: z.string(),
  ParentPolicyElementId: z.number(),
  PolicyElementId: z.number(),
  PolicyId: z.string(),
  PolicyStatus: z.number(),
  PromoCode: z.string(),
  SequenceNumber: z.number(),
})

const TravelDetailSchema = z.object({
  BusinessObjectId: z.number(),
  DisplaySequence: z.number(),
  ParentElementType: z.string(),
  ParentPolicyElementId: z.number(),
  PlaceOfOrgin: z.string(),
  PolicyElementId: z.number(),
  PolicyId: z.string(),
  PolicyStatus: z.number(),
  SequenceNumber: z.number(),
  TravelCountry: z.string(),
  TravelCoverageArea: z.string(),
})

const TravelPolicyDataSchema = z.object({
  Age: z.number(),
  AnnualPremium: z.number(),
  AutoUwResultCode: z.string(),
  BeforeVatPremium: z.number(),
  BusinessCateCode: z.string(),
  BusinessObjectId: z.number(),
  CarrierCode: z.string(),
  CarrierPlanCode: z.string(),
  CarrierProductCode: z.string(),
  DataEntryUserId: z.number(),
  DataEntryUserRealName: z.string(),
  DuePremium: z.number(),
  EffectiveDate: z.string(),
  ExpiryDate: z.string(),
  FirstDataEntryDate: z.string(),
  GrossPremium: z.number(),
  IsAgent: z.string(),
  IsPremiumCalcSuccess: z.string(),
  IsRenewable: z.string(),
  IsTakeUpPolicy: z.string(),
  IssueDate: z.string(),
  IssueUserId: z.number(),
  IssueUserRealName: z.string(),
  LGT: z.number(),
  NoOfAdults: z.number(),
  NoOfChildren: z.number(),
  NoOfTravellers: z.number(),
  OrgCode: z.string(),
  PlanCode: z.string(),
  PolicyCustomerList: z.array(PolicyCustomerSchema),
  PolicyElementId: z.number(),
  PolicyId: z.string(),
  PolicyLobList: z.array(PolicyLobSchema),
  PolicyNo: z.string(),
  PolicyStatus: z.number(),
  PolicyStatusForDisplay: z.number(),
  PolicyType: z.string(),
  Portal: z.string(),
  PremCalcFactorHash: z.string(),
  PremCalcResultHash: z.string(),
  ProductCode: z.string(),
  ProductId: z.number(),
  ProductVersion: z.string(),
  PromoCodeList: z.array(PromoCodeSchema).optional(),
  ProposalDate: z.string(),
  ProposalNo: z.string(),
  ProposalStatus: z.string(),
  QuotationDate: z.string(),
  SchemaVersion: z.number(),
  SumInsured: z.number(),
  TechProductCode: z.string(),
  TechProductId: z.number(),
  TravelDays: z.number().optional(),
  TravelDetailList: z.array(TravelDetailSchema),
  TravelType: z.string(),
  TripType: z.string(),
  VersionSeq: z.number(),
})

// Complete API response type
export const TravelPolicyResponseSchema = createResponseSchema(
  TravelPolicyDataSchema
)

export type TravelPolicyResponse = z.infer<typeof TravelPolicyResponseSchema>
export type TravelPolicyData = z.infer<typeof TravelPolicyDataSchema>
export type PolicyRisk = z.infer<typeof PolicyRiskSchema>
